#!/usr/bin/env ruby
require 'rubygems'
require 'args_parser'
require 'octokit'
require 'pit'
require 'time'

args = ArgsParser.parse ARGV do
  arg :all, 'show all repos'
  arg :day, 'filter by last modified at', :default => 90
  arg :help, 'show help', :alias => :h
end

if args.has_option? :help
  STDERR.puts "show issues on GitHub.com"
  STDERR.puts args.help
  STDERR.puts
  STDERR.puts "e.g."
  STDERR.puts "  github-issues"
  STDERR.puts "  github-issues shokai"
  STDERR.puts "  github-issues shokai zakuni masuilab --all"
  exit
end

conf = Pit.get 'github.com', :require => {
  'login' => 'YOUR_NAME',
  'password' => 'YOUR_PASSWORD'
}

client = Octokit::Client.new :login => conf['login'], :password => conf['password']
repos = []

users = args.argv.empty? ? [nil] : args.argv.uniq

users.each do |name|
  user = client.user name
  pages = (user.public_repos + user.total_private_repos.to_i)/100 + 1

  1.upto(pages).each do |page|
    puts "reading github.com/#{user.login} page #{page}.."
    client.
    repos(user.login, :per_page => 100, :page => page).
    reject{|repo|
      repo.open_issues_count < 1
    }.each{|repo|
      repos.push repo
    }
  end
end

unless args.has_option? :all
  repos.delete_if do |repo|
    repo.updated_at < Time.now - 60*60*24*args[:day]
  end
end

repos.sort!{|a,b|
  b.updated_at <=> a.updated_at
}

repos.each_with_index do |repo, i|
  puts "[#{i+1}/#{repos.size}] #{repo.html_url} (#{repo.open_issues_count} issues) [#{repo.updated_at}]"
  client.issues(repo.full_name).each do |i|
    puts " - ##{i.number}\t#{i.title}"
  end
end


